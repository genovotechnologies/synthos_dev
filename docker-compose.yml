 # Synthos Platform - Complete Docker Compose Setup
# Enterprise-grade multi-service architecture

version: '3.8'

networks:
  synthos-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads:
  exports:

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: synthos_db
      POSTGRES_USER: synthos
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - synthos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synthos -d synthos_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - synthos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql://synthos:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/synthos_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-change-in-production}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MVP_MODE=true
    volumes:
      - uploads:/app/uploads
      - exports:/app/exports
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - synthos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # CELERY WORKERS (DISABLED IN MVP MODE)
  # Uncomment these services when you need background task processing
  # =============================================================================
  # celery-worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: production
  #   command: celery -A app.core.celery worker --loglevel=info --concurrency=4
  #   environment:
  #     - ENVIRONMENT=${ENVIRONMENT:-development}
  #     - DATABASE_URL=postgresql://synthos:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/synthos_db
  #     - REDIS_URL=redis://redis:6379/0
  #     - CELERY_BROKER_URL=redis://redis:6379/1
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/2
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #   volumes:
  #     - uploads:/app/uploads
  #     - exports:/app/exports
  #   networks:
  #     - synthos-network
  #   depends_on:
  #     - postgres
  #     - redis
  #   restart: unless-stopped

  # celery-beat:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: production
  #   command: celery -A app.core.celery beat --loglevel=info
  #   environment:
  #     - ENVIRONMENT=${ENVIRONMENT:-development}
  #     - DATABASE_URL=postgresql://synthos:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/synthos_db
  #     - REDIS_URL=redis://redis:6379/0
  #     - CELERY_BROKER_URL=redis://redis:6379/1
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/2
  #   networks:
  #     - synthos-network
  #   depends_on:
  #     - postgres
  #     - redis
  #   restart: unless-stopped

  # flower:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: production
  #   command: celery -A app.core.celery flower --port=5555
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/1
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/2
  #   ports:
  #     - "5555:5555"
  #   networks:
  #     - synthos-network
  #   depends_on:
  #     - redis
  #   restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_BUILD_TARGET:-production}
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${NEXT_PUBLIC_STRIPE_PUBLIC_KEY}
      - NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "3000:3000"
    networks:
      - synthos-network
    depends_on:
      - backend
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES (DISABLED IN MVP MODE)
  # Uncomment these when you need monitoring
  # =============================================================================
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - synthos-network
  #   restart: unless-stopped
  #   profiles:
  #     - monitoring

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
  #   volumes:
  #     - ./monitoring/grafana:/etc/grafana/provisioning
  #   networks:
  #     - synthos-network
  #   restart: unless-stopped
  #   profiles:
  #     - monitoring

  # =============================================================================
  # LOAD BALANCER (NGINX) - DISABLED IN MVP MODE
  # =============================================================================
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   networks:
  #     - synthos-network
  #   depends_on:
  #     - frontend
  #     - backend
  #   restart: unless-stopped
  #   profiles:
  #     - production

  # =============================================================================
  # DEVELOPMENT SERVICES (only in development)
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - synthos-network
    profiles:
      - development

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@synthos.ai
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    networks:
      - synthos-network
    depends_on:
      - postgres
    profiles:
      - development